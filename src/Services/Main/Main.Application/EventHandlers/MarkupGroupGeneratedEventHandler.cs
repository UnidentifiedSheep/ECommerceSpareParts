using Contracts.Markup;
using Core.Attributes;
using Core.Interfaces;
using Core.Interfaces.MessageBroker;
using Core.Interfaces.Services;
using Exceptions.Exceptions.Markups;
using Main.Core.Entities;
using Main.Core.Interfaces.DbRepositories;
using Main.Core.Interfaces.Pricing;

namespace Main.Application.EventHandlers;

public class MarkupGroupGeneratedEventHandler(IMarkupRepository markupRepository, IUnitOfWork unitOfWork, 
    IMessageBroker messageBroker, IPriceSetup priceSetup) : IEventHandler<MarkupGroupGeneratedEvent>
{
    public async Task HandleAsync(IEventContext<MarkupGroupGeneratedEvent> context)
    {
        await unitOfWork.ExecuteWithTransaction(new TransactionalAttribute(), async () =>
        {
            var generatedMarkup = await markupRepository.GetGeneratedMarkupsAsync()
                                  ?? throw new MarkupGroupNotFoundException(-1);
            unitOfWork.Remove(generatedMarkup);

            var markupRanges = context.Message.MarkupRanges.Select(x => new MarkupRange
            {
                Markup = x.Markup,
                RangeStart = x.From,
                RangeEnd = x.To
            }).ToList();
            var group = new MarkupGroup
            {
                CurrencyId = context.Message.CurrencyId,
                IsAutoGenerated = true,
                Name = "Auto Generated Markup For Default Currency",
                MarkupRanges = markupRanges,
            };
            
            await unitOfWork.AddAsync(group);
            await messageBroker.Publish(new MarkupRangesUpdatedEvent());
            
            await unitOfWork.SaveChangesAsync();
        });
        await priceSetup.SetupAsync();
    }
}