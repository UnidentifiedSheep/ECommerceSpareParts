using Core.Entities;
using Core.Interfaces.DbRepositories;
using Microsoft.EntityFrameworkCore;
using Persistence.Contexts;
using Persistence.Extensions;

namespace Persistence.Repositories;

public class MarkupRepository(DContext context) : IMarkupRepository
{
    public async Task<MarkupGroup?> GetGeneratedMarkupsAsync(bool track = true,
        CancellationToken cancellationToken = default)
    {
        return await context.MarkupGroups.ConfigureTracking(track)
            .Include(x => x.MarkupRanges)
            .FirstOrDefaultAsync(x => x.IsAutoGenerated, cancellationToken);
    }

    public async Task<MarkupGroup?> GetMarkupByIdAsync(int id, bool track = true,
        CancellationToken cancellationToken = default)
    {
        return await context.MarkupGroups.ConfigureTracking(track)
            .Include(x => x.MarkupRanges)
            .FirstOrDefaultAsync(x => x.Id == id, cancellationToken);
    }

    public async Task<IEnumerable<MarkupGroup>> GetMarkupGroups(int page, int viewCound, bool track = true,
        CancellationToken cancellationToken = default)
    {
        return await context.MarkupGroups.ConfigureTracking(track).OrderByDescending(x => x.Id)
            .Skip(viewCound * page).Take(page).ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<MarkupRange>> GetMarkupRanges(int markupId, bool track = true,
        CancellationToken cancellationToken = default)
    {
        return await context.MarkupRanges.ConfigureTracking(track).OrderByDescending(x => x.Id)
            .ToListAsync(cancellationToken);
    }

    public async Task<bool> MarkupExists(int markupId, CancellationToken cancellationToken = default)
    {
        return await context.MarkupGroups.AsNoTracking().AnyAsync(x => x.Id == markupId, cancellationToken);
    }
}